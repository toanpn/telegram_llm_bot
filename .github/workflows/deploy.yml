name: Deploy Telegram Bot to AWS EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        timeout: 600s
        command_timeout: 600s
        script: |
          # Update system packages
          sudo apt-get update -y
          
          # Install essential packages
          sudo apt-get install -y \
            curl \
            wget \
            git \
            unzip \
            software-properties-common \
            apt-transport-https \
            ca-certificates \
            gnupg \
            lsb-release
          
          # Install Docker
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update -y
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker $USER
            sudo systemctl enable docker
            sudo systemctl start docker
            echo "Docker installed successfully"
          fi
          
          # Install Docker Compose
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            echo "Docker Compose installed successfully"
          fi
          
          # Install Python 3.12
          if ! command -v python3.12 &> /dev/null; then
            echo "Installing Python 3.12..."
            sudo add-apt-repository ppa:deadsnakes/ppa -y
            sudo apt-get update -y
            sudo apt-get install -y python3.12 python3.12-pip python3.12-venv python3.12-dev
            echo "Python 3.12 installed successfully"
          fi
          
          # Setup application directory
          mkdir -p ~/telegram-bot
          cd ~/telegram-bot
          
          # Stop existing bot service
          sudo systemctl stop telegram-bot 2>/dev/null || echo "Service not running"
          pkill -f "python.*main.py" || echo "No bot processes to kill"
          
          # Clone or update repository
          if [ -d ".git" ]; then
            echo "Updating repository..."
            git fetch origin
            git reset --hard origin/main
          else
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # Setup Python environment
          rm -rf venv
          python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # Create environment file
          cat > .env << EOF
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          BOT_USERNAME=${{ secrets.BOT_USERNAME }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          GEMINI_MODEL=gemini-1.5-flash
          DATABASE_URL=sqlite:///data/bot_data.db
          DEFAULT_TEMPERATURE=0.7
          DEFAULT_TONE=friendly
          CONTEXT_MESSAGES_COUNT=7
          DEBUG=false
          LOG_LEVEL=INFO
          EOF
          
          # Create required directories
          mkdir -p data logs
          
          # Create systemd service
          sudo tee /etc/systemd/system/telegram-bot.service > /dev/null << EOF
          [Unit]
          Description=Telegram LLM Bot
          After=network.target
          
          [Service]
          Type=simple
          User=$USER
          WorkingDirectory=/home/$USER/telegram-bot
          Environment=PATH=/home/$USER/telegram-bot/venv/bin
          ExecStart=/home/$USER/telegram-bot/venv/bin/python main.py
          Restart=always
          RestartSec=5
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Start the service
          sudo systemctl daemon-reload
          sudo systemctl enable telegram-bot
          sudo systemctl start telegram-bot
          
          # Check service status
          sleep 5
          sudo systemctl status telegram-bot --no-pager
          
          echo "Deployment completed successfully!" 