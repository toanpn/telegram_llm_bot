name: Deploy Telegram Bot to VPS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test SSH Connection
        run: |
          echo "üîç Testing SSH connection to VPS..."
          # Install sshpass for testing
          sudo apt-get update && sudo apt-get install -y sshpass
          
          echo "Debug info:"
          echo "- Host: ${{ secrets.VPS_HOST }}"
          echo "- Port: ${{ secrets.VPS_PORT }}"
          echo "- Username: ${{ secrets.VPS_USERNAME }}"
          echo "- Testing connectivity..."
          
          # Test basic connectivity first
          echo "Testing if host is reachable..."
          if timeout 10 bash -c "</dev/tcp/${{ secrets.VPS_HOST }}/${{ secrets.VPS_PORT }}"; then
            echo "‚úÖ Port ${{ secrets.VPS_PORT }} is reachable on ${{ secrets.VPS_HOST }}"
          else
            echo "‚ùå Cannot reach ${{ secrets.VPS_HOST }}:${{ secrets.VPS_PORT }}"
            echo "This could be a firewall, network, or incorrect host/port issue"
          fi
          
          # Test SSH connection with verbose output
          echo "Testing SSH authentication..."
          if sshpass -p "${{ secrets.VPS_PASSWORD }}" ssh -v -p "${{ secrets.VPS_PORT }}" -o ConnectTimeout=30 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} "echo 'SSH test successful'" 2>&1; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo "Please check:"
            echo "1. VPS is running and accessible"
            echo "2. SSH port ${{ secrets.VPS_PORT }} is open"
            echo "3. Password authentication is enabled on VPS"
            echo "4. Root login is permitted (if using root user)"
            echo "5. Correct password in VPS_PASSWORD secret"
            exit 1
          fi

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          command_timeout: 30m
          script: |
            set -e

            echo "üöÄ Starting deployment to VPS..."

            # Directory where the application should live
            APP_DIR=/opt/telegram-bot

            # Update system packages
            echo "üì¶ Updating system packages..."
            apt-get update

            # Install Docker and Docker Compose if not exists
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io
              systemctl start docker
              systemctl enable docker
              echo "‚úÖ Docker installed successfully"
            else
              echo "‚úÖ Docker already installed"
            fi

            if ! command -v docker-compose &> /dev/null; then
              echo "üê≥ Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              echo "‚úÖ Docker Compose installed successfully"
            else
              echo "‚úÖ Docker Compose already installed"
            fi

            # Install git if not exists
            if ! command -v git &> /dev/null; then
              echo "üì¶ Installing Git..."
              apt-get install -y git
            fi

            # Create application directory
            echo "üìÅ Creating application directory..."
            mkdir -p "$APP_DIR"

            # Clone repo if it does not exist yet
            if [ ! -d "$APP_DIR/.git" ]; then
              echo "üì• Cloning repository..."
              git clone https://github.com/${{ github.repository }} "$APP_DIR"
            fi

            cd "$APP_DIR"

            # Create or update environment file
            echo "‚öôÔ∏è  Creating environment configuration..."
            cat > .env << EOF
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
            BOT_USERNAME=${{ secrets.BOT_USERNAME }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            GEMINI_MODEL=gemini-1.5-flash
            DATABASE_URL=sqlite:///data/bot_data.db
            DEFAULT_TEMPERATURE=0.7
            DEFAULT_TONE=friendly
            CONTEXT_MESSAGES_COUNT=7
            DEBUG=false
            LOG_LEVEL=INFO
            EOF

            # Ensure we are on the main branch and up-to-date
            echo "üîÑ Updating code..."
            git fetch origin
            git checkout main
            git reset --hard origin/main

            # Stop existing containers
            echo "üõë Stopping existing containers..."
            docker-compose down || true

            # Clean up old images to save space
            echo "üßπ Cleaning up old Docker images..."
            docker system prune -f || true

            # Build and start the containers
            echo "üèóÔ∏è  Building and starting containers..."
            docker-compose up -d --build

            # Wait a moment for containers to start
            echo "‚è≥ Waiting for containers to start..."
            sleep 15

            # Show status
            echo "üìä Deployment completed! Container status:"
            docker-compose ps

            echo "üìù Recent logs:"
            docker-compose logs --tail=20

            echo "‚úÖ Telegram bot deployed successfully!"
            
            # Test if container is running
            if docker-compose ps | grep -q "Up"; then
              echo "üéâ Bot container is running successfully!"
            else
              echo "‚ö†Ô∏è  Warning: Bot container may not be running properly"
              echo "Full logs:"
              docker-compose logs
              exit 1
            fi 